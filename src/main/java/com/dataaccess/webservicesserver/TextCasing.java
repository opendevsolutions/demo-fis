package com.dataaccess.webservicesserver;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * The Text Casing Web Service, implemented with Visual DataFlex, provides functions to change text casing in different ways.
 *
 * This class was generated by Apache CXF 3.2.11.redhat-00001
 * 2020-10-04T22:55:40.386-03:00
 * Generated source version: 3.2.11.redhat-00001
 *
 */
@WebServiceClient(name = "TextCasing",
                  wsdlLocation = "file:/D:/Jony/Trabajo/demo/demo-fis/src/main/resources/wsdl/TextCasing.wsdl",
                  targetNamespace = "http://www.dataaccess.com/webservicesserver/")
public class TextCasing extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://www.dataaccess.com/webservicesserver/", "TextCasing");
    public final static QName TextCasingSoap12 = new QName("http://www.dataaccess.com/webservicesserver/", "TextCasingSoap12");
    public final static QName TextCasingSoap = new QName("http://www.dataaccess.com/webservicesserver/", "TextCasingSoap");
    static {
        URL url = null;
        try {
            url = new URL("file:/D:/Jony/Trabajo/demo/demo-fis/src/main/resources/wsdl/TextCasing.wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(TextCasing.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "file:/D:/Jony/Trabajo/demo/demo-fis/src/main/resources/wsdl/TextCasing.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public TextCasing(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public TextCasing(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public TextCasing() {
        super(WSDL_LOCATION, SERVICE);
    }

    public TextCasing(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public TextCasing(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public TextCasing(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }




    /**
     *
     * @return
     *     returns TextCasingSoapType
     */
    @WebEndpoint(name = "TextCasingSoap12")
    public TextCasingSoapType getTextCasingSoap12() {
        return super.getPort(TextCasingSoap12, TextCasingSoapType.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns TextCasingSoapType
     */
    @WebEndpoint(name = "TextCasingSoap12")
    public TextCasingSoapType getTextCasingSoap12(WebServiceFeature... features) {
        return super.getPort(TextCasingSoap12, TextCasingSoapType.class, features);
    }


    /**
     *
     * @return
     *     returns TextCasingSoapType
     */
    @WebEndpoint(name = "TextCasingSoap")
    public TextCasingSoapType getTextCasingSoap() {
        return super.getPort(TextCasingSoap, TextCasingSoapType.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns TextCasingSoapType
     */
    @WebEndpoint(name = "TextCasingSoap")
    public TextCasingSoapType getTextCasingSoap(WebServiceFeature... features) {
        return super.getPort(TextCasingSoap, TextCasingSoapType.class, features);
    }

}
